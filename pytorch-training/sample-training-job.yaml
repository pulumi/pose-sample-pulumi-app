apiVersion: batch/v1
kind: Job
metadata:
  name: pytorch-training-sample
  namespace: pytorch-training
  labels:
    app: pytorch-training
    job-type: sample
spec:
  template:
    metadata:
      labels:
        app: pytorch-training
        job-type: sample
    spec:
      restartPolicy: Never
      tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule
      nodeSelector:
        accelerator: nvidia-tesla-t4
      containers:
      - name: pytorch-trainer
        image: pytorch/pytorch:2.1.0-cuda11.8-cudnn8-devel
        command: ["python", "-c"]
        args:
        - |
          import torch
          import torch.nn as nn
          import torch.optim as optim
          import time
          
          print(f"PyTorch version: {torch.__version__}")
          print(f"CUDA available: {torch.cuda.is_available()}")
          if torch.cuda.is_available():
              print(f"CUDA device count: {torch.cuda.device_count()}")
              print(f"Current CUDA device: {torch.cuda.current_device()}")
              print(f"CUDA device name: {torch.cuda.get_device_name()}")
          
          # Simple neural network for demonstration
          class SimpleNet(nn.Module):
              def __init__(self):
                  super(SimpleNet, self).__init__()
                  self.fc1 = nn.Linear(784, 128)
                  self.fc2 = nn.Linear(128, 64)
                  self.fc3 = nn.Linear(64, 10)
                  self.relu = nn.ReLU()
                  
              def forward(self, x):
                  x = self.relu(self.fc1(x))
                  x = self.relu(self.fc2(x))
                  x = self.fc3(x)
                  return x
          
          # Create model and move to GPU if available
          device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
          model = SimpleNet().to(device)
          
          # Create dummy data
          batch_size = 64
          input_size = 784
          num_classes = 10
          
          # Simulate training
          criterion = nn.CrossEntropyLoss()
          optimizer = optim.Adam(model.parameters(), lr=0.001)
          
          print("Starting training simulation...")
          for epoch in range(5):
              # Generate random data
              inputs = torch.randn(batch_size, input_size).to(device)
              targets = torch.randint(0, num_classes, (batch_size,)).to(device)
              
              # Forward pass
              outputs = model(inputs)
              loss = criterion(outputs, targets)
              
              # Backward pass
              optimizer.zero_grad()
              loss.backward()
              optimizer.step()
              
              print(f"Epoch {epoch+1}/5, Loss: {loss.item():.4f}")
              time.sleep(2)  # Simulate training time
          
          print("Training completed successfully!")
          print("GPU memory allocated:", torch.cuda.memory_allocated() if torch.cuda.is_available() else "N/A")
        resources:
          requests:
            memory: "4Gi"
            cpu: "2"
            nvidia.com/gpu: 1
          limits:
            memory: "8Gi"
            cpu: "4"
            nvidia.com/gpu: 1
        volumeMounts:
        - name: datasets
          mountPath: /datasets
        - name: models
          mountPath: /models
      volumes:
      - name: datasets
        persistentVolumeClaim:
          claimName: pytorch-datasets
      - name: models
        emptyDir: {}
  backoffLimit: 3